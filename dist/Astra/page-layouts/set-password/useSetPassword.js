!function webpackUniversalModuleDefinition(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("fdk-core/utils"),require("react"),require("react-hook-form"),require("react-router-dom")):"function"==typeof define&&define.amd?define("firestone",["fdk-core/utils","react","react-hook-form","react-router-dom"],n):"object"==typeof exports?exports.firestone=n(require("fdk-core/utils"),require("react"),require("react-hook-form"),require("react-router-dom")):e.firestone=n(e["fdk-core/utils"],e.react,e["react-hook-form"],e["react-router-dom"])}("undefined"!=typeof self?self:this,((e,n,t,r)=>(()=>{"use strict";var o={345:(e,n,t)=>{t.d(n,{o:()=>useAccounts});var r=t(9155),o=t(447),i=t(4442),a=t(6111),s=t(1948);const useAccounts=e=>{let{fpi:n}=e;const t=(0,i.useNavigate)(),c=(0,i.useLocation)(),[u,l]=(0,r.useState)(null),d=(0,o.useGlobalStore)(n.getters.USER_DATA),p=(0,o.useGlobalStore)(n.getters.PLATFORM_DATA),_=(0,o.useGlobalStore)(n.getters.LOGGED_IN),m=(0,r.useMemo)((()=>u?.is_signed_in?`Continue as ${u.profile.full_name}`:"Login with Facebook"),[u]),facebookLogin=async()=>{};return{userData:d,platformData:p,isLoggedIn:_,openLogin:function(){let{redirect:e=!0}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const n=new URLSearchParams(c.search);e&&n.set("redirectUrl",encodeURIComponent(c.pathname+c.search)),t({pathname:"/auth/login",search:n.toString()})},openRegister:function(){let{redirect:e=!0}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const n=new URLSearchParams(c.search);e&&n.set("redirectUrl",c.pathname),t({pathname:"/auth/register",search:n.toString()})},openForgotPassword:()=>{t({pathname:"/auth/forgot-password",search:c.search})},openHomePage:()=>{const e=new URLSearchParams(c.search).get("redirectUrl")||"";window.location.href=window.location.origin+decodeURIComponent(e)},updateProfile:e=>{const t=window.APP_DATA.applicationID,{registerToken:r,firstName:o,lastName:i,gender:c,email:u,phone:{countryCode:l,mobile:d}}=e,p=[["$platform",`${t}`],["$editProfileRequestInput",`${`{\n\t\t\tcountry_code: "${l}",\n    \tfirst_name: "${o}",\n\t\t\tlast_name: "${i}",\n\t\t\tgender: "${c}",\n\t\t\tregister_token: "${r}",\n\t\t\t${u?`email: "${u}",`:""}\n\t\t\t${d&&l?`mobile: {\n\t\t\t\tcountry_code: "${l}",\n\t\t\t\tphone: "${d}"\n\t\t\t}`:""}\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.ab,p),null)},signOut:()=>n.executeGraphQL((0,a.Ll)(s.T_),null).then((e=>{if(e?.user?.logout?.logout){const n=new URLSearchParams(c.search).get("redirectUrl")||"";return window.location.href=window.location.origin+decodeURIComponent(n),e}return Promise.reject()})),signIn:e=>{const{isRedirection:t,password:r,username:o}=e,i=[["$username",`${o}`],["$password",`${r}`]];return n.executeGraphQL((0,a.Ll)(s.oW,i),null).then((e=>{if(e?.errors)throw e?.errors?.[0];if(t){const e=new URLSearchParams(c.search).get("redirectUrl")||"";window.location.href=window.location.origin+decodeURIComponent(e)}return e}))},sendOtp:e=>{let{mobile:t,countryCode:r}=e;const o=[["$platform",`${window.APP_DATA.applicationID}`],["$sendOtpRequestInput",`${`{\n\t\t\tmobile: "${t}"\n\t\t\tcountry_code: "${r}",\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.xc,o),null)},resendOtp:e=>{let{mobile:t,countryCode:r,token:o,action:i}=e;const c=[["$platform",`${window.APP_DATA.applicationID}`],["$sendMobileOtpRequestInput",`${`{\n\t\t\tmobile: "${t}",\n\t\t\tcountry_code: "${r}",\n    \ttoken: "${o}",\n\t\t\taction: ${i},\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.cK,c),null)},signInWithOtp:e=>{let{otp:r,requestId:o,isRedirection:i=!0}=e;const u=[["$platform",`${window.APP_DATA.applicationID}`],["$verifyOtpRequestInput",`${`{\n\t\t\totp: "${r}",\n    \trequest_id: "${o}",\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.j1,u),null).then((e=>{if(e?.errors)throw e?.errors?.[0];const{user_exists:n}=e?.verifyMobileOTP||{};if(n){const e=new URLSearchParams(c.search).get("redirectUrl")||"";window.location.href=window.location.origin+decodeURIComponent(e)}else i&&t({pathname:"/auth/edit-profile",search:c.search});return e}))},signUp:e=>{const t=window.APP_DATA.applicationID,{registerToken:r,firstName:o,lastName:i,gender:c,email:u,phone:{countryCode:l,mobile:d},password:p}=e,_=[["$platform",`${t}`],["$formRegisterRequestInput",`${`{\n\t\t\tgender: "${c}",\n\t\t\tfirst_name: "${o}",\n\t\t\tlast_name: "${i}",\n\t\t\tpassword: "${p}",\n\t\t\tregister_token: "${r}",\n\t\t\t${u?`email: "${u}",`:""}\n\t\t\t${l&&d?`phone: { country_code: "${l}", mobile: "${d}" },`:""}\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.IJ,_),null)},setPassword:e=>{let{password:r,code:o}=e;const i=[["$code",`${o}`],["$password",`${r}`]];return n.executeGraphQL((0,a.Ll)(s.s_,i),null).then((e=>(t({pathname:"/"}),e)))},sendOtpMobile:e=>{},sendResetPasswordEmail:e=>{const t=window.APP_DATA.applicationID,{email:r}=e,o=[["$platform",`${t}`],["$email",`${r}`]];return n.executeGraphQL((0,a.Ll)(s.C1,o),null)},sendResetPasswordMobile:e=>{},resendVerifyMobileOtp:e=>{const{mobile:t,countryCode:r,token:o}=e,i=[["$platform",`${window.APP_DATA.applicationID}`],["$sendMobileOtpRequestInput",`${`{\n\t\t\tmobile: "${t}",\n\t\t\tcountry_code: "${r}",\n    \ttoken: "${o}",\n\t\t\taction: resend,\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.cK,i),null)},resendVerifyEmailOtp:e=>{const{email:t,registerToken:r,token:o}=e,i=[["$platform",`${window.APP_DATA.applicationID}`],["$sendEmailOtpRequestInput",`${`{\n\t\t\temail: "${t}",\n\t\t\tregister_token: "${r}",\n    \ttoken: "${o}",\n\t\t\taction: "resend",\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.QF,i),null)},verifyMobileOtp:e=>{const{requestId:r="",registerToken:o="",otp:i,isEmailVerified:u,isRedirection:l}=e,d=[["$platform",`${window.APP_DATA.applicationID}`],["$verifyOtpRequestInput",`${`{\n\t\t\totp: "${i}",\n\t\t\tregister_token: "${o}",\n    \trequest_id: "${r}",\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.j1,d),null).then((e=>{const{user_exists:n,email:r,verify_email_link:o}=e?.verifyMobileOTP||{};if(n)if(o){if(l){const e=new URLSearchParams(c.search);e.set("email",r),t({pathname:"/auth/verify-email-link",search:e.toString()})}}else if(l){const e=new URLSearchParams(c.search).get("redirectUrl")||"";window.location.href=window.location.origin+decodeURIComponent(e)}return e}))},verifyEmailOtp:e=>{const{otp:t,email:r,registerToken:o,action:i,isMobileVerified:u,isRedirection:l}=e,d=[["$platform",`${window.APP_DATA.applicationID}`],["$verifyEmailOtpRequestInput",`${`{\n\t\t\tregister_token: "${o}",\n\t\t\totp: "${t}",\n    \temail: "${r}",\n\t\t\taction: "${i}"\n\t\t}`}`]];return n.executeGraphQL((0,a.Ll)(s.$d,d),null).then((e=>{if(l){const e=new URLSearchParams(c.search).get("redirectUrl")||"";window.location.href=window.location.origin+decodeURIComponent(e)}return e}))},sendVerificationLinkEmail:e=>{},facebook:(0,r.useMemo)((()=>({display_text:m,login:facebookLogin}))),addEmail:e=>{}}}},6111:(e,n,t)=>{t.d(n,{Ll:()=>updateGraphQueryWithValue});function updateGraphQueryWithValue(e,n){return e&&n&&Array.isArray(n)?(n.forEach((n=>{const[t,r]=n;t&&r?e=e.split(t).join(r):console.error("Invalid replacement format. Each replacement should be an array [$search, replaceWith].")})),e):(console.error("Invalid input. Please provide a valid main string and an array of replacements."),e)}},1948:(e,n,t)=>{t.d(n,{$d:()=>d,C1:()=>c,IJ:()=>u,QF:()=>p,T_:()=>a,ab:()=>s,cK:()=>l,j1:()=>o,nd:()=>m,oW:()=>i,s_:()=>_,xc:()=>r});const r='mutation LoginWithOTP {\n  loginWithOTP(platform: "$platform", sendOtpRequestSchemaInput: $sendOtpRequestInput) {\n    country_code\n    email\n    message\n    mobile\n    register_token\n    request_id\n    resend_email_token\n    resend_timer\n    resend_token\n    success\n    user_exists\n    verify_email_otp\n    verify_mobile_otp\n  }\n}',o='mutation VerifyMobileOTP {\n  verifyMobileOTP(platform: "$platform", verifyOtpRequestSchemaInput: $verifyOtpRequestInput) {\n    register_token\n    user {\n      id\n      account_type\n      active\n      application_id\n      created_at\n      dob\n      emails {\n        active\n        email\n        primary\n        verified\n      }\n      first_name\n      gender\n      last_name\n      meta\n      phone_numbers {\n        active\n        country_code\n        phone\n        primary\n        verified\n      }\n      profile_pic_url\n      updated_at\n      user_id\n      username\n      debug {\n        platform\n        source\n      }\n      has_old_password_hash\n      uid\n    }\n    user_exists\n  }\n}',i='mutation LoginWithEmailAndPassword {\n    loginWithEmailAndPassword(passwordLoginRequestSchemaInput: {\n        username: "$username",\n        password: "$password",\n      }) {\n      register_token\n      request_id\n      user {\n        id\n        account_type\n        active\n        application_id\n        created_at\n        dob\n        emails {\n          active\n          email\n          primary\n          verified\n        }\n        first_name\n        gender\n        last_name\n        meta\n        phone_numbers {\n          active\n          country_code\n          phone\n          primary\n          verified\n        }\n        profile_pic_url\n        updated_at\n        user_id\n        username\n        debug {\n          platform\n          source\n        }\n        has_old_password_hash\n        uid\n      }\n    }\n  }',a="query Logout {\n  user {\n    logout {\n      logout\n    }\n  }\n}",s='mutation UpdateProfile {\n  updateProfile(platform: "$platform", editProfileRequestSchemaInput: $editProfileRequestInput) {\n    country_code\n    email\n    message\n    mobile\n    register_token\n    request_id\n    resend_email_token\n    resend_timer\n    resend_token\n    success\n    user {\n      id\n      account_type\n      active\n      application_id\n      created_at\n      dob\n      emails {\n        active\n        email\n        primary\n        verified\n      }\n      first_name\n      gender\n      last_name\n      meta\n      phone_numbers {\n        active\n        country_code\n        phone\n        primary\n        verified\n      }\n      profile_pic_url\n      updated_at\n      user_id\n      username\n      debug {\n        platform\n        source\n      }\n      has_old_password_hash\n      uid\n    }\n    user_exists\n    verify_email_link\n    verify_email_otp\n    verify_mobile_otp\n  }\n}',c='mutation SendResetPasswordEmail {\n  sendResetPasswordEmail(platform: "$platform", sendResetPasswordEmailRequestSchemaInput: {email: "$email"}) {\n    status\n  }\n}',u='mutation RegisterWithForm {\n  registerWithForm(platform: "$platform", formRegisterRequestSchemaInput: $formRegisterRequestInput) {\n    country_code\n    email\n    message\n    mobile\n    register_token\n    request_id\n    resend_email_token\n    resend_timer\n    resend_token\n    success\n    user_exists\n    verify_email_otp\n    verify_mobile_otp\n  }\n}\n',l='mutation SendOTPOnMobile {\n  sendOTPOnMobile(sendMobileOtpRequestSchemaInput: $sendMobileOtpRequestInput, platform: "$platform") {\n    country_code\n    message\n    mobile\n    register_token\n    request_id\n    resend_timer\n    resend_token\n    success\n  }\n}\n',d='mutation VerifyEmailOTP {\n  verifyEmailOTP(platform: "$platform", verifyEmailOtpRequestSchemaInput: $verifyEmailOtpRequestInput) {\n    register_token\n    user {\n      id\n      account_type\n      active\n      application_id\n      created_at\n      dob\n      emails {\n        active\n        email\n        primary\n        verified\n      }\n      first_name\n      gender\n      last_name\n      meta\n      phone_numbers {\n        active\n        country_code\n        phone\n        primary\n        verified\n      }\n      profile_pic_url\n      updated_at\n      user_id\n      username\n      debug {\n        platform\n        source\n      }\n      has_old_password_hash\n      uid\n    }\n    user_exists\n  }\n}',p='mutation SendOTPOnEmail {\n  sendOTPOnEmail(platform: "$platform", sendEmailOtpRequestSchemaInput: $sendEmailOtpRequestInput) {\n    success\n  }\n}',_='mutation ForgotPassword {\n  forgotPassword(forgotPasswordRequestSchemaInput: { code: "$code", password: "$password" }) {\n    register_token\n    request_id\n    user {\n      id\n      account_type\n      active\n      application_id\n      created_at\n      dob\n      emails {\n        active\n        email\n        primary\n        verified\n      }\n      first_name\n      gender\n      last_name\n      meta\n      phone_numbers {\n        active\n        country_code\n        phone\n        primary\n        verified\n      }\n      profile_pic_url\n      updated_at\n      user_id\n      username\n      debug {\n        platform\n        source\n      }\n      has_old_password_hash\n      uid\n    }\n  }\n}',m='mutation SendResetToken {\n  sendResetToken(codeRequestBodySchemaInput: { code: "$code" }) {\n    status\n  }\n}'},447:n=>{n.exports=e},9155:e=>{e.exports=n},1862:e=>{e.exports=t},4442:e=>{e.exports=r}},i={};function __webpack_require__(e){var n=i[e];if(void 0!==n)return n.exports;var t=i[e]={exports:{}};return o[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};return(()=>{__webpack_require__.r(a),__webpack_require__.d(a,{default:()=>__WEBPACK_DEFAULT_EXPORT__});var e=__webpack_require__(9155),n=(__webpack_require__(447),__webpack_require__(4442)),t=__webpack_require__(1862),r=__webpack_require__(6111),o=__webpack_require__(1948),i=__webpack_require__(345);const __WEBPACK_DEFAULT_EXPORT__=a=>{const{setPassword:s}=(0,i.o)({fpi:a}),c=n.useLocation,u=(0,t.useForm)({defaultValues:{newPassword:"",confirmNewPassword:""}});(0,e.useEffect)((()=>{const e=[["$code",`${new URLSearchParams(c.search).get("code")}`]];a.executeGraphQL((0,r.Ll)(o.nd,e),null).then((e=>e))}),[]);return{setPasswordForm:u,handleSetPassword:e=>{const n=new URLSearchParams(c.search);return s({password:e.newPassword,code:n.get("code")}).then((e=>{console.log({res:e})})).catch((e=>{}))}}}})(),a})()));